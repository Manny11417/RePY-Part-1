TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self, filename, create):
        # Local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        # Create or open files based on the create flag
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)

        # If creating a file, initialize with 'SE'
        if create:
            self.Afile.writeat('SE', 0)

    def writeat(self, data, offset):
        # Write the requested data to the B file
        self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Read from the A file
        return self.Afile.readat(bytes, offset)

    def close(self):
        # Check if filename.b starts with 'S' and ends with 'E'
        fileb_data = self.Bfile.readat(None, 0)
        if fileb_data.startswith('S') and fileb_data.endswith('E'):
            # Replace filename.a with filename.b's data
            self.Afile.writeat(fileb_data, 0)

        # Close both files
        self.Afile.close()
        self.Bfile.close()

def ABopenfile(filename, create):
    return ABFile(filename, create)

# Set up type checking and variable hiding
sec_file_def = {
    "obj-type": ABFile,
    "name": "ABFile",
    "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)), "target": ABFile.writeat},
    "readat": {"type": "func", "args": ((int, type(None)), (int)), "exceptions": Exception, "return": str, "target": ABFile.readat},
    "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)), "target": ABFile.close}
}

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def, TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()
