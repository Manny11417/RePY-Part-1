TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class ABFile():
    def __init__(self, filename, create):
        # Local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        # Create or open files based on the create flag
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)

        # If creating a file, initialize with 'SE'
        if create:
            self.Afile.writeat('SE', 0)

    def writeat(self, data, offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Read from the A file using the sandbox's readat
        return self.Afile.readat(bytes, offset)

    def close(self):
        # Close both files
        self.Afile.close()
        self.Bfile.close()

def ABopenfile(filename, create):
    return ABFile(filename, create)

def is_valid_update(data):
    """Check if data represents a valid update"""
    return data.startswith('S') and data.endswith('E')

def secure_writeat(filename, data, offset):
    """Secure writeat function to prevent evil users from doing great bad things"""
    if not is_valid_update(data):
        raise ValueError("Invalid update: Update must start with 'S' and end with 'E'")
    return ABFile(filename, create=False).writeat(data, offset)

# Set up type checking and variable hiding
sec_file_def = {
    "obj-type": ABFile,
    "name": "ABFile",
    "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)), "target": secure_writeat},
    "readat": {"type": "func", "args": ((int, type(None)), (int)), "exceptions": Exception, "return": str, "target": ABFile.readat},
    "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)), "target": ABFile.close}
}

CHILD_CONTEXT_DEF["ABopenfile"] = {"type": OBJC, "args": (str, bool), "exceptions": Exception, "return": sec_file_def, "target": ABopenfile}

secure_dispatch_module()
